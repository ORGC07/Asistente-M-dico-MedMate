{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"src/app/services/firestore.service\";\nimport * as i4 from \"src/app/app.component\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"@angular/common\";\nfunction HomePage_ion_item_group_7_ion_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 4)(1, \"ion-card-header\")(2, \"ion-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-card-content\")(5, \"h4\")(6, \"b\");\n    i0.ɵɵtext(7, \"Hora:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const drug_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Medicamento: \", drug_r3.medicamento, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(drug_r3.hora);\n  }\n}\nfunction HomePage_ion_item_group_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item-group\")(1, \"ion-item-divider\", 4)(2, \"ion-label\")(3, \"h1\");\n    i0.ɵɵtext(4, \" Medicamentos \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(5, HomePage_ion_item_group_7_ion_card_5_Template, 9, 2, \"ion-card\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.drugs);\n  }\n}\nfunction HomePage_ion_item_group_8_ion_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 4)(1, \"ion-card-header\")(2, \"ion-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-card-content\")(5, \"h4\")(6, \"b\");\n    i0.ɵɵtext(7, \"Doctor:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"h4\")(10, \"b\");\n    i0.ɵɵtext(11, \"Fecha:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h4\")(14, \"b\");\n    i0.ɵɵtext(15, \"Hora:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const date_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Especialidad: \", date_r5.especialidad, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", date_r5.doctor, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", date_r5.fecha, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", date_r5.hora, \"\");\n  }\n}\nfunction HomePage_ion_item_group_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item-group\")(1, \"ion-item-divider\", 4)(2, \"ion-label\")(3, \"h1\");\n    i0.ɵɵtext(4, \" Proximas citas \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(5, HomePage_ion_item_group_8_ion_card_5_Template, 17, 4, \"ion-card\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.dates);\n  }\n}\nconst fecha = new Date(); // crea un objeto Date con la fecha y hora actual del sistema\nconst horasistema = fecha.getHours(); // obtiene la hora actual (en formato de 24 horas)\nconst minutossistema = fecha.getMinutes(); // obtiene los minutos actuales\nexport class HomePage {\n  constructor(router, auth, store, comp, alertController) {\n    this.router = router;\n    this.auth = auth;\n    this.store = store;\n    this.comp = comp;\n    this.alertController = alertController;\n    this.infom = {\n      medicamento: \"\",\n      cdias: 0,\n      fecha: \"\",\n      hora: 0,\n      userid: \"\",\n      id: \"\"\n    };\n    this.infoc = {\n      doctor: \"\",\n      iddoctor: \"\",\n      paciente: \"\",\n      idpaciente: \"\",\n      especialidad: \"\",\n      fecha: new Date(),\n      hora: 0,\n      id: \"\",\n      estado: \"\"\n    };\n    this.info = null;\n    this.drugs = [];\n    this.dates = [];\n  }\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uid = yield this.auth.getUid();\n      if (uid) {\n        this.uid = uid;\n        this.medicamentos();\n        this.citas();\n        console.log(\"entro1\");\n        this.comp.menu();\n        const path = \"Pacientes\";\n        this.store.getDoc(path, uid).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n          if (res) {\n            this.info = res;\n            console.log(this.info);\n            const alert = yield this.alertController.create({\n              header: \"Bienvenido\",\n              message: this.info.nombre + \" \" + this.info.apellido,\n              buttons: [\"Aceptar\"]\n            });\n            yield alert.present();\n            return;\n          }\n        }));\n      }\n    });\n  }\n  medicamentos() {\n    const path = 'Medicamentos';\n    this.store.consultar(path).subscribe(res => {\n      if (res) {\n        this.drugs = [];\n        res.filter(med => med.userid == this.uid) // Filtrar medicamentos del usuario actual\n        .sort((a, b) => {\n          // Ordenar por hora más cercana a la hora actual\n          const horaA = new Date(a.fecha + ' ' + a.hora + ':00').getTime();\n          const horaB = new Date(b.fecha + ' ' + b.hora + ':00').getTime();\n          return Math.abs(horaA - fecha.getTime()) - Math.abs(horaB - fecha.getTime());\n        }).slice(0, 2) // Mostrar solo los dos medicamentos más cercanos a la hora actual\n        .forEach(med => this.drugs.push(med));\n        console.log(this.drugs);\n      }\n    });\n  }\n  citas() {\n    const path = 'Citas';\n    this.store.consultar(path).subscribe(res => {\n      if (res) {\n        this.dates = [];\n        res.filter(cita => cita.idpaciente == this.uid) // Filtrar citas del usuario actual\n        .filter(cita => {\n          const fechaCita = new Date(cita.fecha + ' ' + cita.hora + ':00');\n          if (fechaCita.getTime() == fecha.getTime()) {\n            // Si la cita es para hoy, solo mostrar si la hora es mayor que la hora actual\n            return cita.hora > horasistema;\n          } else if (fechaCita.getTime() > fecha.getTime()) {\n            // Si la cita es para otro día, mostrar solo si la fecha no ha pasado\n            return true;\n          } else {\n            // Si la cita es para otro día y la fecha ya pasó, no mostrar\n            return false;\n          }\n        }).sort((a, b) => {\n          // Ordenar por hora más cercana a la hora actual\n          const horaA = new Date(a.fecha + ' ' + a.hora + ':00').getTime();\n          const horaB = new Date(b.fecha + ' ' + b.hora + ':00').getTime();\n          return Math.abs(horaA - fecha.getTime()) - Math.abs(horaB - fecha.getTime());\n        }).slice(0, 2) // Mostrar solo las dos citas más cercanas a la hora actual\n        .forEach(cita => this.dates.push(cita));\n        console.log(this.dates);\n      }\n    });\n  }\n}\nHomePage.ɵfac = function HomePage_Factory(t) {\n  return new (t || HomePage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.FirestoreService), i0.ɵɵdirectiveInject(i4.AppComponent), i0.ɵɵdirectiveInject(i5.AlertController));\n};\nHomePage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomePage,\n  selectors: [[\"app-home\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[\"color\", \"principal\"], [\"slot\", \"start\"], [\"color\", \"blanco\", 1, \"ion-padding\"], [4, \"ngIf\"], [\"color\", \"relleno\"], [\"color\", \"relleno\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function HomePage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-title\");\n      i0.ɵɵtext(3, \"Home\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-buttons\", 1);\n      i0.ɵɵelement(5, \"ion-menu-button\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"ion-content\", 2);\n      i0.ɵɵtemplate(7, HomePage_ion_item_group_7_Template, 6, 1, \"ion-item-group\", 3);\n      i0.ɵɵtemplate(8, HomePage_ion_item_group_8_Template, 6, 1, \"ion-item-group\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.drugs);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.dates);\n    }\n  },\n  dependencies: [i6.NgForOf, i6.NgIf, i5.IonButtons, i5.IonCard, i5.IonCardContent, i5.IonCardHeader, i5.IonCardTitle, i5.IonContent, i5.IonHeader, i5.IonItemDivider, i5.IonItemGroup, i5.IonLabel, i5.IonMenuButton, i5.IonTitle, i5.IonToolbar],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;IAkBIA,mCAAqD;IAEjCA,YAAiC;IAAAA,iBAAiB;IAEpEA,wCAAkB;IACTA,qBAAK;IAAAA,iBAAI;IAAAA,YAAa;IAAAA,iBAAK;;;;IAHlBA,eAAiC;IAAjCA,+DAAiC;IAGjCA,eAAa;IAAbA,kCAAa;;;;;IAbnCA,sCAA8B;IAItBA,8BACF;IAAAA,iBAAK;IAGTA,oFAOW;IACbA,iBAAiB;;;;IARYA,eAAQ;IAARA,sCAAQ;;;;;IAqBnCA,mCAAqD;IAEjCA,YAAmC;IAAAA,iBAAiB;IAEtEA,wCAAkB;IACRA,uBAAO;IAAAA,iBAAI;IAACA,YAAe;IAAAA,iBAAK;IACxCA,0BAAI;IAAIA,uBAAM;IAAAA,iBAAI;IAACA,aAAc;IAAAA,iBAAK;IACtCA,2BAAI;IAAIA,sBAAK;IAAAA,iBAAI;IAACA,aAAa;IAAAA,iBAAK;;;;IALpBA,eAAmC;IAAnCA,iEAAmC;IAG/BA,eAAe;IAAfA,8CAAe;IAChBA,eAAc;IAAdA,6CAAc;IACfA,eAAa;IAAbA,4CAAa;;;;;IAhBrCA,sCAA8B;IAItBA,gCACF;IAAAA,iBAAK;IAITA,qFASW;IAEbA,iBAAiB;;;;IAXYA,eAAQ;IAARA,sCAAQ;;;AC/BvC,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE,CAAC,CAAC;AAC1B,MAAMC,WAAW,GAAGF,KAAK,CAACG,QAAQ,EAAE,CAAC,CAAC;AACtC,MAAMC,cAAc,GAAGJ,KAAK,CAACK,UAAU,EAAE,CAAC,CAAC;AAO3C,OAAM,MAAOC,QAAQ;EA0BnBC,YACUC,MAAc,EACdC,IAAiB,EACjBC,KAAuB,EACvBC,IAAkB,EAClBC,eAAgC;IAJhC,WAAM,GAANJ,MAAM;IACN,SAAI,GAAJC,IAAI;IACJ,UAAK,GAALC,KAAK;IACL,SAAI,GAAJC,IAAI;IACJ,oBAAe,GAAfC,eAAe;IA7BzB,UAAK,GAAe;MAClBC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,CAAC;MACRd,KAAK,EAAE,EAAE;MACTe,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,EAAE;MACVC,EAAE,EAAE;KACL;IACD,UAAK,GAAS;MACZC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,EAAE;MAChBtB,KAAK,EAAE,IAAIC,IAAI,EAAE;MACjBc,IAAI,EAAE,CAAC;MACPE,EAAE,EAAE,EAAE;MACNM,MAAM,EAAE;KACT;IACD,SAAI,GAAa,IAAK;IACtB,UAAK,GAAU,EAAE;IACjB,UAAK,GAAU,EAAE;EASd;EAEGC,QAAQ;;MACZ,MAAMC,GAAG,GAAG,MAAM,IAAI,CAAChB,IAAI,CAACiB,MAAM,EAAE;MACpC,IAAID,GAAG,EAAE;QACP,IAAI,CAACA,GAAG,GAAGA,GAAG;QACd,IAAI,CAACE,YAAY,EAAE;QACnB,IAAI,CAACC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB,IAAI,CAACnB,IAAI,CAACoB,IAAI,EAAE;QAChB,MAAMC,IAAI,GAAG,WAAW;QACxB,IAAI,CAACtB,KAAK,CAACuB,MAAM,CAAWD,IAAI,EAAEP,GAAG,CAAC,CAACS,SAAS,CAAQC,GAAG,IAAIC;UAC/D,IAAID,GAAG,EAAE;YACP,IAAI,CAACE,IAAI,GAAGF,GAAG;YACfN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACO,IAAI,CAAC;YACtB,MAAMC,KAAK,GAAG,MAAM,IAAI,CAAC1B,eAAe,CAAC2B,MAAM,CAAC;cAC9CC,MAAM,EAAE,YAAY;cACpBC,OAAO,EAAE,IAAI,CAACJ,IAAI,CAACK,MAAM,GAAE,GAAG,GAAE,IAAI,CAACL,IAAI,CAACM,QAAQ;cAClDC,OAAO,EAAE,CAAC,SAAS;aACpB,CAAC;YAEF,MAAMN,KAAK,CAACO,OAAO,EAAE;YACrB;;QACA,CAAC,EAAC;;IACP,CAAC;;EAEFlB,YAAY;IACV,MAAMK,IAAI,GAAG,cAAc;IAC3B,IAAI,CAACtB,KAAK,CAACoC,SAAS,CAAad,IAAI,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;MACvD,IAAIA,GAAG,EAAE;QACP,IAAI,CAACY,KAAK,GAAG,EAAE;QACfZ,GAAG,CAACa,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACjC,MAAM,IAAI,IAAI,CAACS,GAAG,CAAE,CAAC;QAAA,CAC1CyB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UACb;UACA,MAAMC,KAAK,GAAG,IAAIpD,IAAI,CAACkD,CAAC,CAACnD,KAAK,GAAG,GAAG,GAAGmD,CAAC,CAACpC,IAAI,GAAG,KAAK,CAAC,CAACuC,OAAO,EAAE;UAChE,MAAMC,KAAK,GAAG,IAAItD,IAAI,CAACmD,CAAC,CAACpD,KAAK,GAAG,GAAG,GAAGoD,CAAC,CAACrC,IAAI,GAAG,KAAK,CAAC,CAACuC,OAAO,EAAE;UAChE,OAAOE,IAAI,CAACC,GAAG,CAACJ,KAAK,GAAGrD,KAAK,CAACsD,OAAO,EAAE,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACF,KAAK,GAAGvD,KAAK,CAACsD,OAAO,EAAE,CAAC;QAC9E,CAAC,CAAC,CACDI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAAA,CACZC,OAAO,CAAEV,GAAG,IAAK,IAAI,CAACF,KAAK,CAACa,IAAI,CAACX,GAAG,CAAC,CAAC;QACzCpB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACiB,KAAK,CAAC;;IAE3B,CAAC,CAAC;EACJ;EAEAnB,KAAK;IACH,MAAMI,IAAI,GAAG,OAAO;IACpB,IAAI,CAACtB,KAAK,CAACoC,SAAS,CAAOd,IAAI,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;MACjD,IAAIA,GAAG,EAAE;QACP,IAAI,CAAC0B,KAAK,GAAG,EAAE;QACf1B,GAAG,CAACa,MAAM,CAAEc,IAAI,IAAKA,IAAI,CAACzC,UAAU,IAAI,IAAI,CAACI,GAAG,CAAC,CAAC;QAAA,CAC/CuB,MAAM,CAAEc,IAAI,IAAI;UACf,MAAMC,SAAS,GAAG,IAAI9D,IAAI,CAAC6D,IAAI,CAAC9D,KAAK,GAAG,GAAG,GAAG8D,IAAI,CAAC/C,IAAI,GAAG,KAAK,CAAC;UAChE,IAAIgD,SAAS,CAACT,OAAO,EAAE,IAAItD,KAAK,CAACsD,OAAO,EAAE,EAAE;YAC1C;YACA,OAAOQ,IAAI,CAAC/C,IAAI,GAAGb,WAAW;WAC/B,MAAM,IAAI6D,SAAS,CAACT,OAAO,EAAE,GAAGtD,KAAK,CAACsD,OAAO,EAAE,EAAE;YAChD;YACA,OAAO,IAAI;WACZ,MAAM;YACL;YACA,OAAO,KAAK;;QAEhB,CAAC,CAAC,CACDJ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UACb;UACA,MAAMC,KAAK,GAAG,IAAIpD,IAAI,CAACkD,CAAC,CAACnD,KAAK,GAAG,GAAG,GAAGmD,CAAC,CAACpC,IAAI,GAAG,KAAK,CAAC,CAACuC,OAAO,EAAE;UAChE,MAAMC,KAAK,GAAG,IAAItD,IAAI,CAACmD,CAAC,CAACpD,KAAK,GAAG,GAAG,GAAGoD,CAAC,CAACrC,IAAI,GAAG,KAAK,CAAC,CAACuC,OAAO,EAAE;UAChE,OAAOE,IAAI,CAACC,GAAG,CAACJ,KAAK,GAAGrD,KAAK,CAACsD,OAAO,EAAE,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACF,KAAK,GAAGvD,KAAK,CAACsD,OAAO,EAAE,CAAC;QAC9E,CAAC,CAAC,CACDI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAAA,CACZC,OAAO,CAAEG,IAAI,IAAK,IAAI,CAACD,KAAK,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;QAC3CjC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC+B,KAAK,CAAC;;IAE3B,CAAC,CAAC;EACJ;;;mBA3GWvD,QAAQ;AAAA;;QAARA,QAAQ;EAAA0D;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDjBrBrE,kCAAY;MAEGA,oBAAI;MAAAA,iBAAY;MAC3BA,sCAA0B;MACxBA,kCAAmC;MACrCA,iBAAc;MAIlBA,sCAAgD;MAC9CA,+EAgBiB;MAIjBA,+EAoBiB;MACnBA,iBAAc;;;MAzCKA,eAAW;MAAXA,gCAAW;MAoBXA,eAAW;MAAXA,gCAAW","names":["i0","fecha","Date","horasistema","getHours","minutossistema","getMinutes","HomePage","constructor","router","auth","store","comp","alertController","medicamento","cdias","hora","userid","id","doctor","iddoctor","paciente","idpaciente","especialidad","estado","ngOnInit","uid","getUid","medicamentos","citas","console","log","menu","path","getDoc","subscribe","res","__awaiter","info","alert","create","header","message","nombre","apellido","buttons","present","consultar","drugs","filter","med","sort","a","b","horaA","getTime","horaB","Math","abs","slice","forEach","push","dates","cita","fechaCita","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\erick\\OneDrive\\Documentos\\GitHub\\Asistente-M-dico-MedMate\\MedMate\\src\\app\\mpacientes\\home\\home.page.html","C:\\Users\\erick\\OneDrive\\Documentos\\GitHub\\Asistente-M-dico-MedMate\\MedMate\\src\\app\\mpacientes\\home\\home.page.ts"],"sourcesContent":["<ion-header>\r\n  <ion-toolbar color=\"principal\">\r\n    <ion-title>Home</ion-title>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\" color=\"blanco\">\r\n  <ion-item-group *ngIf=\"drugs\">\r\n    <ion-item-divider color=\"relleno\">\r\n      <ion-label>\r\n        <h1>\r\n          Medicamentos\r\n        </h1>\r\n      </ion-label>\r\n    </ion-item-divider>\r\n    <ion-card *ngFor=\"let drug of drugs\" color=\"relleno\">\r\n      <ion-card-header>\r\n        <ion-card-title>Medicamento: {{drug.medicamento}}</ion-card-title>\r\n      </ion-card-header>\r\n      <ion-card-content>\r\n        <h4><b>Hora:</b>{{drug.hora}}</h4>\r\n      </ion-card-content>\r\n    </ion-card>\r\n  </ion-item-group>\r\n\r\n\r\n\r\n  <ion-item-group *ngIf=\"dates\">\r\n    <ion-item-divider color=\"relleno\">\r\n      <ion-label >\r\n        <h1>\r\n          Proximas citas\r\n        </h1>\r\n      </ion-label>\r\n    </ion-item-divider>\r\n\r\n    <ion-card *ngFor=\"let date of dates\" color=\"relleno\">\r\n      <ion-card-header>\r\n        <ion-card-title>Especialidad: {{date.especialidad}}</ion-card-title>\r\n      </ion-card-header>\r\n      <ion-card-content>\r\n        <h4> <b>Doctor:</b> {{date.doctor}}</h4>\r\n        <h4> <b>Fecha:</b> {{date.fecha}}</h4>\r\n        <h4> <b>Hora:</b> {{date.hora}}</h4>\r\n      </ion-card-content>\r\n    </ion-card>\r\n\r\n  </ion-item-group>\r\n</ion-content>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AlertController, IonFooter } from '@ionic/angular';\r\nimport { AppComponent } from 'src/app/app.component';\r\nimport { cita, medicacion, paciente } from 'src/app/models/interface';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { FirestoreService } from 'src/app/services/firestore.service';\r\n\r\nconst fecha = new Date(); // crea un objeto Date con la fecha y hora actual del sistema\r\nconst horasistema = fecha.getHours(); // obtiene la hora actual (en formato de 24 horas)\r\nconst minutossistema = fecha.getMinutes(); // obtiene los minutos actuales\r\n\r\n@Component({\r\n  selector: \"app-home\",\r\n  templateUrl: \"./home.page.html\",\r\n  styleUrls: [\"./home.page.scss\"],\r\n})\r\nexport class HomePage implements OnInit {\r\n\r\n  infom: medicacion = {\r\n    medicamento: \"\",\r\n    cdias: 0,\r\n    fecha: \"\",\r\n    hora: 0,\r\n    userid: \"\",\r\n    id: \"\",\r\n  };\r\n  infoc: cita = {\r\n    doctor: \"\",\r\n    iddoctor: \"\",\r\n    paciente: \"\",\r\n    idpaciente: \"\",\r\n    especialidad: \"\",\r\n    fecha: new Date(),\r\n    hora: 0,\r\n    id: \"\",\r\n    estado: \"\",\r\n  };\r\n  info: paciente = null!;\r\n  drugs: any[] = [];\r\n  dates: any[] = [];\r\n  uid: any;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private auth: AuthService,\r\n    private store: FirestoreService,\r\n    private comp: AppComponent,\r\n    private alertController: AlertController\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    const uid = await this.auth.getUid();\r\n    if (uid) {\r\n      this.uid = uid;\r\n      this.medicamentos();\r\n      this.citas();\r\n      console.log(\"entro1\");\r\n      this.comp.menu();\r\n      const path = \"Pacientes\";\r\n      this.store.getDoc<paciente>(path, uid).subscribe(async (res) => {\r\n      if (res) {\r\n        this.info = res;\r\n        console.log(this.info);\r\n        const alert = await this.alertController.create({\r\n          header: \"Bienvenido\",\r\n          message: this.info.nombre +\" \"+ this.info.apellido,\r\n          buttons: [\"Aceptar\"],\r\n        });\r\n\r\n        await alert.present();\r\n        return;\r\n      } }); \r\n  }}\r\n\r\n  medicamentos() {\r\n    const path = 'Medicamentos';\r\n    this.store.consultar<medicacion>(path).subscribe((res) => {\r\n      if (res) {\r\n        this.drugs = [];\r\n        res.filter((med) => med.userid == this.uid,) // Filtrar medicamentos del usuario actual\r\n          .sort((a, b) => {\r\n            // Ordenar por hora más cercana a la hora actual\r\n            const horaA = new Date(a.fecha + ' ' + a.hora + ':00').getTime();\r\n            const horaB = new Date(b.fecha + ' ' + b.hora + ':00').getTime();\r\n            return Math.abs(horaA - fecha.getTime()) - Math.abs(horaB - fecha.getTime());\r\n          })\r\n          .slice(0, 2) // Mostrar solo los dos medicamentos más cercanos a la hora actual\r\n          .forEach((med) => this.drugs.push(med));\r\n        console.log(this.drugs);\r\n      }\r\n    });\r\n  }\r\n\r\n  citas() {\r\n    const path = 'Citas';\r\n    this.store.consultar<cita>(path).subscribe((res) => {\r\n      if (res) {\r\n        this.dates = [];\r\n        res.filter((cita) => cita.idpaciente == this.uid) // Filtrar citas del usuario actual\r\n          .filter((cita) => {\r\n            const fechaCita = new Date(cita.fecha + ' ' + cita.hora + ':00');\r\n            if (fechaCita.getTime() == fecha.getTime()) {\r\n              // Si la cita es para hoy, solo mostrar si la hora es mayor que la hora actual\r\n              return cita.hora > horasistema;\r\n            } else if (fechaCita.getTime() > fecha.getTime()) {\r\n              // Si la cita es para otro día, mostrar solo si la fecha no ha pasado\r\n              return true;\r\n            } else {\r\n              // Si la cita es para otro día y la fecha ya pasó, no mostrar\r\n              return false;\r\n            }\r\n          })\r\n          .sort((a, b) => {\r\n            // Ordenar por hora más cercana a la hora actual\r\n            const horaA = new Date(a.fecha + ' ' + a.hora + ':00').getTime();\r\n            const horaB = new Date(b.fecha + ' ' + b.hora + ':00').getTime();\r\n            return Math.abs(horaA - fecha.getTime()) - Math.abs(horaB - fecha.getTime());\r\n          })\r\n          .slice(0, 2) // Mostrar solo las dos citas más cercanas a la hora actual\r\n          .forEach((cita) => this.dates.push(cita));\r\n        console.log(this.dates);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}